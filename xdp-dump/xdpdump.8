.TH "xdpdump" "1" "April 6, 2020" "v0.0.3" "a simple tcpdump like tool for capturing packets at the XDP layer"

.SH "xdpdump - a simple tcpdump like tool for capturing packets at the XDP layer"
.PP
\fIxdpdump\fP is a simple XDP packet capture tool that tries to behave similar to
\fItcpdump\fP, however, it has no packet filter or decode capabilities.

.PP
\fIxdpdump\fP works by attaching a bpf trace program to the XDP entry and/or exit
function which stores the raw packet in a perf trace buffer. If no XDP program
is loaded this approach can not be used and the tool will use a libpcap
live-capture to be backward compatible.

.SS "Running xdpdump"
.PP
The syntax for running \fIxdpdump\fP is:

.RS
.nf
\fCUsage: xdpdump [options]

 XDPDump tool to dump network traffic

Options:
     --rx-capture <mode>    Capture point for the rx direction (valid values: entry,exit)
 -D, --list-interfaces      Print the list of available interfaces
 -i, --interface <ifname>   Name of interface to capture on
 -s, --snapshot-length <snaplen>  Minimum bytes of packet to capture
 -w, --write <file>         Write raw packets to pcap file
 -x, --hex                  Print the full packet in hex
 -v, --verbose              Enable verbose logging (-vv: more verbose)
 -h, --help                 Show this help
\fP
.fi
.RE

.SH "The options explained"
.PP
The \fIxdpdump\fP tool tries to mimic the basic \fItcpdump\fP options, but just in case
below each of the available options is explained:

.SS "--rx-capture <mode>"
.PP
Specify where the ingress packet gets captured. Either at the entry of the XDP
program and/or exit of the XDP program. Valid options are \fBentry\fP, \fBexit\fP,
or both \fBentry,exit\fP. The packet at \fBexit\fP can be modified by the XDP
program. If you are interested to see both the original and modified packet,
use the \fBentry,exit\fP option. With this, each packet is captured twice. The
default value for this is \fBentry\fP.
.SS "-D, --list-interfaces"
.PP
Display a list of available interfaces and any XDP program loaded
.SS "-i, --interface <ifname>"
.PP
Listen on interface \fIifname\fP. Note that if no XDP program is loaded on the
interface it will use libpcap's live capture mode to capture the packets.
.SS "-s, --snapshot-length <snaplen>"
.PP
Capture \fBsnaplen\fP bytes of a packet rather than the default 262144 bytes.
.SS "-w, --write <file>"
.PP
Write the raw packets to a pcap file rather than printing them out hexadecimal. Standard output is used if \fBfile\fP is \fI\-\fP.
.SS "-x, --hex"
.PP
When dumping packets on the console also print the full packet content in hex.
.SS "-v, --verbose"
.PP
Enable debug logging. Specify twice for even more verbosity.
.SS "-h, --help"
.PP
Display a summary of the available options

.SH "Examples"
.PP
The below will load the \fIxdp\-filter\fP program on eth0, but it does not do any
actual filtering:

.RS
.nf
\fC# xdp-filter load --mode skb eth0
#
# xdpdump -D
if_index  if_name           XDP program entry function
--------  ----------------  --------------------------------------------------
1         lo                <No XDP program loaded!>
2         eth0              xdpfilt_blk_all()
\fP
.fi
.RE

.PP
Now we can try \fIxdpdump\fP:

.RS
.nf
\fC# xdpdump -i eth0
1584373839.460733895: packet size 102 bytes, captured 102 bytes on if_index 2, rx queue 0, @entry
  0x0000:  52 54 00 db 44 b6 52 54 00 34 38 da 08 00 45 48  RT..D.RT.48...EH
  0x0010:  00 58 d7 dd 40 00 40 06 ec c3 c0 a8 7a 01 c0 a8  .X..@.@.....z...
  0x0020:  7a 64 9c de 00 16 0d d5 c6 bc 46 c9 bb 11 80 18  zd........F.....
  0x0030:  01 f5 7b b4 00 00 01 01 08 0a 77 0a 8c b8 40 12  ..{.......w...@.
  0x0040:  cc a6 00 00 00 10 54 ce 6e 20 c3 e7 da 6c 08 42  ......T.n ...l.B
  0x0050:  d6 d9 ee 42 42 f0 82 c9 4f 12 ed 7b 19 ab 22 0d  ...BB...O..{..".
  0x0060:  09 29 a9 ee df 89                                .)....

1584373839.462340808: packet size 66 bytes, captured 66 bytes on if_index 2, rx queue 0, @entry
  0x0000:  52 54 00 db 44 b6 52 54 00 34 38 da 08 00 45 48  RT..D.RT.48...EH
  0x0010:  00 34 d7 de 40 00 40 06 ec e6 c0 a8 7a 01 c0 a8  .4..@.@.....z...
  0x0020:  7a 64 9c de 00 16 0d d5 c6 e0 46 c9 bc 85 80 10  zd........F.....
  0x0030:  01 f5 74 0c 00 00 01 01 08 0a 77 0a 8c ba 40 12  ..t.......w...@.
  0x0040:  d2 34                                            .4
^C
2 packets captured
0 packets dropped by perf ring
\fP
.fi
.RE

.PP
Below are two more examples redirecting the capture file to \fItcpdump\fP or
\fItshark\fP:

.RS
.nf
\fC# xdpdump -i eth0 -w - | tcpdump -r - -n
reading from file -, link-type EN10MB (Ethernet)
15:55:09.075887 IP 192.168.122.1.40928 > 192.168.122.100.ssh: Flags [P.], seq 3857553815:3857553851, ack 3306438882, win 501, options [nop,nop,TS val 1997449167 ecr 1075234328], length 36
15:55:09.077756 IP 192.168.122.1.40928 > 192.168.122.100.ssh: Flags [.], ack 37, win 501, options [nop,nop,TS val 1997449169 ecr 1075244363], length 0
15:55:09.750230 IP 192.168.122.1.40928 > 192.168.122.100.ssh: Flags [P.], seq 36:72, ack 37, win 501, options [nop,nop,TS val 1997449842 ecr 1075244363], length 36
\fP
.fi
.RE

.RS
.nf
\fC# xdpdump -i eth0 -w - | tshark -r - -n
    1   0.000000 192.168.122.1 → 192.168.122.100 SSH 102 Client: Encrypted packet (len=36)
    2   0.000646 192.168.122.1 → 192.168.122.100 TCP 66 40158 → 22 [ACK] Seq=37 Ack=37 Win=1467 Len=0 TSval=1997621571 TSecr=1075416765
    3  12.218164 192.168.122.1 → 192.168.122.100 SSH 102 Client: Encrypted packet (len=36)
\fP
.fi
.RE

.SH "BUGS"
.PP
Please report any bugs on Github: \fIhttps://github.com/xdp-project/xdp-tools/issues\fP

.SH "AUTHOR"
.PP
\fIxdpdump\fP was written by Eelco Chaudron
